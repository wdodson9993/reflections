When would you want to use a remote repository rather than keeping all your work
local?

    When you want to share our content publicly or collaborate with others to
    create content.

Why might you want to always pull changes manually rather than having Git
automatically stay up-to-date with your remote repository?

    Automatic updates could break current project work in the local repository.

Describe the differences between forks, clones, and branches.  When would you
use one instead of another?

    Forks are a facility provided by GitHub, allowing for clones of repositories
    to be created on GitHub while maintaining linkage from the original to the clone.
    Clones replicate local or remote repositories, but without maintaining linkage on the original regarding the clone.  Branching creates a parallel sequence of commits within a repository.

    Forking is appropriate when you don't have permission to update the original and you want to leave a record of the fact that you are making a copy.  It would also be
    appropriate when creating a semi-permanent checkout, as when starting a new project
    from the code base.

    Cloning is appropriate when making a one-way copy and there is no need to leave a
    record on the original that the copy was made.  It is also appropriate  when you are
    planning to update code and you  have write permission to the original code or 
    access to someone who does.

    Branching always occurs within a repository and can be used to maintain integrity of the codebase while changes are being developed.

What is the benefit of having a copy of the last known state of the remote
stored locally?

    git can determine status of local repository even if off-line.

How would you collaborate without using Git or GitHub?  What would be easier,
and what would be harder?

    I have created check-out/check-in workflows in the past using other types of repositories without version control.  Of cource, programs to compare files and 
    highlight changes are basic programming 101 type exercises.  Even versioning 
    is something that can be accomplished manually.  Having multiple people working on
    a project requires communication and discipline.  These things are manageable
    with small-ish teams.  What Git and GitHub provide is automated workflows and 
    leveraging the metadata and history in ways that are more difficult in a manual
    approach.  Clearly, Git and Github would be advantageous for larger projects
    involving hundreds or thousands of contributors, and where coordination through
    communication can be difficult.

When would you want to make changes in a separate branch rather than directly in
master?  What benefits does each approach have?

    When colaborating, using a separate branch on GitHub makes sense, especially if you
    control who is actually allowed to commit changes to the master codebase.  Branches
    also help to keep the stable code stable.

    Use of branches is optional if only one person is maintaining the code.  Not using branches simplifies the workflow, but can complicate life if you want to only 
    release part of the changes that you have made.
